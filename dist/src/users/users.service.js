"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = void 0;
const common_1 = require("@nestjs/common");
const user_repository_1 = require("./user.repository");
const shared_1 = require("../../shared");
const typescript_optional_1 = require("typescript-optional");
const NameRegExp = /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z—É—û–µ—ë—ã–∞–π—Ü—É–∫–µ–Ω–≥—à—û–∑—Ö—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é–£–é–ï–Å–´–ê–ô–¶–£–ö–ï–ù–ì–®–é–ó–•–§–Ü–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–Ü–¢–¨–ë–Æ\s]+$/;
const NameMinLeng = 2;
const NameMaxLeng = 50;
let UsersService = class UsersService extends shared_1.BaseClass {
    constructor(usersRepository, errorHandlerService) {
        super();
        this.usersRepository = usersRepository;
        this.errorHandlerService = errorHandlerService;
    }
    async checkCreate(ctx) {
        try {
            this.logger.log(`checkCreate: Starting process, tgId:${ctx.from.id}`);
            const { id } = ctx.from;
            const tgIdString = id.toString();
            this.logger.debug(`checkCreate: id made string`);
            await this.checkUserExistence(tgIdString);
            this.logger.debug(`checkCreate: user not found`);
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—èüëÄ');
            return;
        }
        catch (error) {
            this.logger.error(`checkCreate: Error in process, tgId:${ctx.from.id}, error:${error.message}`);
            return await this.errorHandlerService.handleError(error, ctx);
        }
    }
    async checkUserExistence(tgIdString) {
        typescript_optional_1.Optional.ofNullable(await this.usersRepository.findUserByTgId(tgIdString)).ifPresent(() => new shared_1.TgError(`–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüôÉ`));
    }
    async create(ctx) {
        try {
            this.logger.log(`create: Starting process, tgId:${ctx.from.id}`);
            const name = this.extractTextFromContext(ctx);
            const validateName = this.validateText(name, NameRegExp, NameMinLeng, NameMaxLeng);
            this.logger.debug(`create: Validated name, tgId:${ctx.from.id}, name:${name}`);
            const tgIdString = ctx.from.id.toString();
            await this.usersRepository.createUser(name, tgIdString, validateName);
            this.logger.log(`create: User created, tgId:${ctx.from.id}, name:${name}`);
            await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ');
            await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã:\n\n' +
                '1. –í–µ–∑–¥–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' +
                '   –ì–¥–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!\n' +
                '2. –ì–¥–µ –æ—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥, –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n' +
                '   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ N —Ç–∞–∫ –∏ N+N,\n' +
                '   –≤ —Å–ø–∞–ª–∏–ª–∏/–Ω–æ—Ä–º–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∂–µ—Å—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç N');
            await ctx.scene.enter('default');
            return;
        }
        catch (error) {
            this.logger.error(`create: Error in process, tgId:${ctx.from.id}, error:${error.message}`);
            await ctx.reply(`${error.message}`);
            ctx.scene.reset();
        }
    }
};
exports.UsersService = UsersService;
exports.UsersService = UsersService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [user_repository_1.UsersRepository,
        shared_1.ErrorHandlerService])
], UsersService);
//# sourceMappingURL=users.service.js.map