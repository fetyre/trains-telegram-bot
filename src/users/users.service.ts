import { Injectable } from '@nestjs/common';
import { UsersRepository } from './user.repository';
import { BaseClass, ErrorHandlerService, TgError } from '../../shared';
import { SceneContext } from 'telegraf/typings/scenes';
import { Optional } from 'typescript-optional';

const NameRegExp: RegExp =
	/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z—É—û–µ—ë—ã–∞–π—Ü—É–∫–µ–Ω–≥—à—û–∑—Ö—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é–£–é–ï–Å–´–ê–ô–¶–£–ö–ï–ù–ì–®–é–ó–•–§–Ü–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–Ü–¢–¨–ë–Æ\s]+$/;
const NameMinLeng: number = 2;
const NameMaxLeng: number = 50;

@Injectable()
export class UsersService extends BaseClass {
	constructor(
		private readonly usersRepository: UsersRepository,
		private readonly errorHandlerService: ErrorHandlerService
	) {
		super();
	}

	public async checkCreate(ctx: SceneContext): Promise<void> {
		try {
			this.logger.log(`checkCreate: Starting process, tgId:${ctx.from.id}`);
			const { id } = ctx.from;
			const tgIdString: string = id.toString();
			this.logger.debug(`checkCreate: id made string`);
			await this.checkUserExistence(tgIdString);
			this.logger.debug(`checkCreate: user not found`);
			await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—èüëÄ');
			return;
		} catch (error) {
			this.logger.error(
				`checkCreate: Error in process, tgId:${ctx.from.id}, error:${error.message}`
			);
			return await this.errorHandlerService.handleError(error, ctx);
		}
	}

	private async checkUserExistence(tgIdString: string): Promise<void> {
		Optional.ofNullable(
			await this.usersRepository.findUserByTgId(tgIdString)
		).ifPresent(() => new TgError(`–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüôÉ`));
	}

	public async create(ctx: SceneContext): Promise<void> {
		try {
			this.logger.log(`create: Starting process, tgId:${ctx.from.id}`);
			const name: string = this.extractTextFromContext(ctx);
			const validateName: string = this.validateText(
				name,
				NameRegExp,
				NameMinLeng,
				NameMaxLeng
			);
			this.logger.debug(
				`create: Validated name, tgId:${ctx.from.id}, name:${name}`
			);
			const tgIdString: string = ctx.from.id.toString();
			await this.usersRepository.createUser(name, tgIdString, validateName);
			this.logger.log(
				`create: User created, tgId:${ctx.from.id}, name:${name}`
			);
			await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ');
			await ctx.reply(
				'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã:\n\n' +
					'1. –í–µ–∑–¥–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' +
					'   –ì–¥–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!\n' +
					'2. –ì–¥–µ –æ—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥, –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n' +
					'   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ N —Ç–∞–∫ –∏ N+N,\n' +
					'   –≤ —Å–ø–∞–ª–∏–ª–∏/–Ω–æ—Ä–º–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∂–µ—Å—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç N'
			);
			await ctx.scene.enter('default');
			return;
		} catch (error) {
			this.logger.error(
				`create: Error in process, tgId:${ctx.from.id}, error:${error.message}`
			);
			await ctx.reply(`${error.message}`);
			ctx.scene.reset();
		}
	}
}
